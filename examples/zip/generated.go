// Package zip was automatically generated by Shenzhen Go.
package zip // import "shenzhen-go/examples/zip"

import (
	"runtime"
	"sync"
)

var _ = runtime.Compiler

func Zip(input0 <-chan interface{}, input1 <-chan interface{}, output chan<- struct {
	Field0 interface{}
	Field1 interface{}
}) {
	// Zip

	for {
		allClosed := true
		send := true
		if allClosed {
			break
		}
		if !send {
			continue
		}
		output <- struct {
			Field0 interface{}
			Field1 interface{}
		}{}
	}
}

// Run executes all the goroutines associated with the graph that generated
// this package, and waits for any that were marked as "wait for this to
// finish" to finish before returning.
func Run() {

	var wg sync.WaitGroup

	wg.Add(1)
	go func() {
		Zip(nil, nil, nil)
		wg.Done()
	}()

	// Wait for the various goroutines to finish.
	wg.Wait()
}
