// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: shenzhen-go.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShenzhenGo_Action_FullMethodName             = "/proto.ShenzhenGo/Action"
	ShenzhenGo_Run_FullMethodName                = "/proto.ShenzhenGo/Run"
	ShenzhenGo_SetChannel_FullMethodName         = "/proto.ShenzhenGo/SetChannel"
	ShenzhenGo_SetGraphProperties_FullMethodName = "/proto.ShenzhenGo/SetGraphProperties"
	ShenzhenGo_SetNode_FullMethodName            = "/proto.ShenzhenGo/SetNode"
	ShenzhenGo_SetPosition_FullMethodName        = "/proto.ShenzhenGo/SetPosition"
)

// ShenzhenGoClient is the client API for ShenzhenGo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShenzhenGoClient interface {
	// Action performs an action (save, generate, install/build, etc).
	Action(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ActionResponse], error)
	// Run runs the program.
	Run(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Input, Output], error)
	// SetNode either creates a new channel (name == "", config != nil)
	// changes existing channel data such as name and attached pins (name is found, config != nil),
	// or deletes a channel (name is found, config == nil).
	SetChannel(ctx context.Context, in *SetChannelRequest, opts ...grpc.CallOption) (*Empty, error)
	// SetGraphProperties changes metdata such as name and package path.
	SetGraphProperties(ctx context.Context, in *SetGraphPropertiesRequest, opts ...grpc.CallOption) (*Empty, error)
	// SetNode either creates a new node (name == "", config != nil)
	// changes existing node such as name and multiplicity (name is found, config != nil),
	// or deletes a node (name is found, config == nil).
	SetNode(ctx context.Context, in *SetNodeRequest, opts ...grpc.CallOption) (*Empty, error)
	// SetPosition changes the node position in the diagram.
	SetPosition(ctx context.Context, in *SetPositionRequest, opts ...grpc.CallOption) (*Empty, error)
}

type shenzhenGoClient struct {
	cc grpc.ClientConnInterface
}

func NewShenzhenGoClient(cc grpc.ClientConnInterface) ShenzhenGoClient {
	return &shenzhenGoClient{cc}
}

func (c *shenzhenGoClient) Action(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ActionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ShenzhenGo_ServiceDesc.Streams[0], ShenzhenGo_Action_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ActionRequest, ActionResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShenzhenGo_ActionClient = grpc.ServerStreamingClient[ActionResponse]

func (c *shenzhenGoClient) Run(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Input, Output], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ShenzhenGo_ServiceDesc.Streams[1], ShenzhenGo_Run_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Input, Output]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShenzhenGo_RunClient = grpc.BidiStreamingClient[Input, Output]

func (c *shenzhenGoClient) SetChannel(ctx context.Context, in *SetChannelRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ShenzhenGo_SetChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shenzhenGoClient) SetGraphProperties(ctx context.Context, in *SetGraphPropertiesRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ShenzhenGo_SetGraphProperties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shenzhenGoClient) SetNode(ctx context.Context, in *SetNodeRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ShenzhenGo_SetNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shenzhenGoClient) SetPosition(ctx context.Context, in *SetPositionRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ShenzhenGo_SetPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShenzhenGoServer is the server API for ShenzhenGo service.
// All implementations must embed UnimplementedShenzhenGoServer
// for forward compatibility.
type ShenzhenGoServer interface {
	// Action performs an action (save, generate, install/build, etc).
	Action(*ActionRequest, grpc.ServerStreamingServer[ActionResponse]) error
	// Run runs the program.
	Run(grpc.BidiStreamingServer[Input, Output]) error
	// SetNode either creates a new channel (name == "", config != nil)
	// changes existing channel data such as name and attached pins (name is found, config != nil),
	// or deletes a channel (name is found, config == nil).
	SetChannel(context.Context, *SetChannelRequest) (*Empty, error)
	// SetGraphProperties changes metdata such as name and package path.
	SetGraphProperties(context.Context, *SetGraphPropertiesRequest) (*Empty, error)
	// SetNode either creates a new node (name == "", config != nil)
	// changes existing node such as name and multiplicity (name is found, config != nil),
	// or deletes a node (name is found, config == nil).
	SetNode(context.Context, *SetNodeRequest) (*Empty, error)
	// SetPosition changes the node position in the diagram.
	SetPosition(context.Context, *SetPositionRequest) (*Empty, error)
	mustEmbedUnimplementedShenzhenGoServer()
}

// UnimplementedShenzhenGoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShenzhenGoServer struct{}

func (UnimplementedShenzhenGoServer) Action(*ActionRequest, grpc.ServerStreamingServer[ActionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Action not implemented")
}
func (UnimplementedShenzhenGoServer) Run(grpc.BidiStreamingServer[Input, Output]) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedShenzhenGoServer) SetChannel(context.Context, *SetChannelRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChannel not implemented")
}
func (UnimplementedShenzhenGoServer) SetGraphProperties(context.Context, *SetGraphPropertiesRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGraphProperties not implemented")
}
func (UnimplementedShenzhenGoServer) SetNode(context.Context, *SetNodeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNode not implemented")
}
func (UnimplementedShenzhenGoServer) SetPosition(context.Context, *SetPositionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPosition not implemented")
}
func (UnimplementedShenzhenGoServer) mustEmbedUnimplementedShenzhenGoServer() {}
func (UnimplementedShenzhenGoServer) testEmbeddedByValue()                    {}

// UnsafeShenzhenGoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShenzhenGoServer will
// result in compilation errors.
type UnsafeShenzhenGoServer interface {
	mustEmbedUnimplementedShenzhenGoServer()
}

func RegisterShenzhenGoServer(s grpc.ServiceRegistrar, srv ShenzhenGoServer) {
	// If the following call pancis, it indicates UnimplementedShenzhenGoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShenzhenGo_ServiceDesc, srv)
}

func _ShenzhenGo_Action_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShenzhenGoServer).Action(m, &grpc.GenericServerStream[ActionRequest, ActionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShenzhenGo_ActionServer = grpc.ServerStreamingServer[ActionResponse]

func _ShenzhenGo_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShenzhenGoServer).Run(&grpc.GenericServerStream[Input, Output]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShenzhenGo_RunServer = grpc.BidiStreamingServer[Input, Output]

func _ShenzhenGo_SetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShenzhenGoServer).SetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShenzhenGo_SetChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShenzhenGoServer).SetChannel(ctx, req.(*SetChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShenzhenGo_SetGraphProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGraphPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShenzhenGoServer).SetGraphProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShenzhenGo_SetGraphProperties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShenzhenGoServer).SetGraphProperties(ctx, req.(*SetGraphPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShenzhenGo_SetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShenzhenGoServer).SetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShenzhenGo_SetNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShenzhenGoServer).SetNode(ctx, req.(*SetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShenzhenGo_SetPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShenzhenGoServer).SetPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShenzhenGo_SetPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShenzhenGoServer).SetPosition(ctx, req.(*SetPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShenzhenGo_ServiceDesc is the grpc.ServiceDesc for ShenzhenGo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShenzhenGo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ShenzhenGo",
	HandlerType: (*ShenzhenGoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetChannel",
			Handler:    _ShenzhenGo_SetChannel_Handler,
		},
		{
			MethodName: "SetGraphProperties",
			Handler:    _ShenzhenGo_SetGraphProperties_Handler,
		},
		{
			MethodName: "SetNode",
			Handler:    _ShenzhenGo_SetNode_Handler,
		},
		{
			MethodName: "SetPosition",
			Handler:    _ShenzhenGo_SetPosition_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Action",
			Handler:       _ShenzhenGo_Action_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Run",
			Handler:       _ShenzhenGo_Run_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "shenzhen-go.proto",
}
